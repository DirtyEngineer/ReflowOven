/*********************************************************************
ReflowOvenFLily - Written to work with ReflowControllerB
LilyPadUSB.bootloader.extended_fuses=0xce
LilyPadUSB.bootloader.high_fuses=0xd8
LilyPadUSB.bootloader.low_fuses=0xff

           Magic Happens Here!
* 225-|                                               x  x  
*     |                                            x        x
*     |                                         x              x
*     |                                      x                    x
* 200-|                                   x                          x
*     |                              x    |                          |   x   
*     |                         x         |                          |       x
*     |                    x              |                          |
* 150-|               x                   |                          |
*     |             x |                   |                          |
*     |           x   |                   |                          | 
*     |         x     |                   |                          | 
*     |       x       |                   |                          | 
*     |     x         |                   |                          |
*     |   x           |                   |                          |
* 30 -| x             |                   |                          |
*     |<  60 - 90 s  >|<    90 - 120 s   >|<       90 - 120 s       >|
*     | Preheat Stage |   Soaking Stage   |       Reflow Stage       | Cool
*  0  |_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
*                                                                Time (Seconds)
*********************************************************************/

#include <Wire.h>
// Includes
#include <Adafruit_GFX.h>       // GFX Library - https://github.com/adafruit/Adafruit-GFX-Library
#include <Adafruit_SSD1306.h>   // SSD Library - https://github.com/adafruit/Adafruit_SSD1306
#include <Adafruit_MAX31855.h>  // Thermocouple Library - https://github.com/rocketscream/MAX31855
#include <PID_v1.h>             // PID Library - http://playground.arduino.cc/Code/PIDLibrary
                                //             - https://github.com/br3ttb/Arduino-PID-Library/
#include <EEPROMEx.h>           // EEPROMex Library - http://playground.arduino.cc/Code/EEPROMex
// OHARARP FAVICON (LCD ASSISTANT, Byte Orientation - Horizontal Width = 64 Height = 64
static unsigned char PROGMEM logo[] = { 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xC0,
0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xF0, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFC,
0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFC, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFE,
0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFF, 0xFE,
0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF,
0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF,
0x7F, 0xFF, 0xFF, 0xE0, 0x03, 0xE7, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0x80, 0x03, 0xCF, 0xFF, 0xFF,
0x7F, 0xFF, 0xFE, 0x00, 0x07, 0xCF, 0xFF, 0xFF, 0x7F, 0xFF, 0xF8, 0x00, 0x07, 0x8F, 0xFF, 0xFF,
0x7F, 0xFF, 0xF0, 0x00, 0x0F, 0x87, 0xFF, 0xFF, 0x7F, 0xFF, 0xE0, 0x00, 0x1F, 0x03, 0xFF, 0xFF,
0x7F, 0xFF, 0xC0, 0x00, 0x3E, 0x01, 0xFF, 0xFF, 0x7F, 0xFF, 0x80, 0x00, 0x7E, 0x00, 0xFF, 0xFF,
0x7F, 0xFF, 0x80, 0x00, 0x7C, 0x00, 0x7F, 0xFF, 0x7F, 0xFF, 0x00, 0x00, 0xFC, 0x00, 0x7F, 0xFF,
0x7F, 0xFF, 0x00, 0x01, 0xFF, 0xC0, 0x3F, 0xFF, 0x7F, 0xFE, 0x00, 0x03, 0xFF, 0xC0, 0x3F, 0xFF,
0x7F, 0xFE, 0x00, 0x07, 0xFF, 0x80, 0x1F, 0xFF, 0x7F, 0xFC, 0x00, 0x07, 0xFF, 0x80, 0x1F, 0xFF,
0x7F, 0xFC, 0x00, 0x0F, 0xFF, 0x00, 0x0F, 0xFF, 0x7F, 0xFC, 0x00, 0x10, 0xFE, 0x00, 0x0F, 0xFF,
0x7F, 0xFC, 0x00, 0x01, 0xFE, 0x00, 0x0F, 0xFF, 0x7F, 0xF8, 0x00, 0x03, 0xFC, 0x00, 0x0F, 0xFF,
0x7F, 0xF8, 0x00, 0x03, 0xFC, 0x00, 0x0F, 0xFF, 0x7F, 0xF8, 0x00, 0x07, 0xF8, 0x00, 0x0F, 0xFF,
0x7F, 0xF8, 0x00, 0x07, 0xF8, 0x00, 0x0F, 0xFF, 0x7F, 0xF8, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xFF,
0x7F, 0xF8, 0x00, 0x0F, 0xE0, 0x00, 0x0F, 0xFF, 0x7F, 0xF8, 0x00, 0x1F, 0xE0, 0x00, 0x0F, 0xFF,
0x7F, 0xFC, 0x00, 0x1F, 0xC0, 0x00, 0x0F, 0xFF, 0x7F, 0xFC, 0x00, 0x3F, 0xFC, 0x00, 0x0F, 0xFF,
0x7F, 0xFC, 0x00, 0x7F, 0xF8, 0x00, 0x0F, 0xFF, 0x7F, 0xFC, 0x00, 0x7F, 0xF0, 0x00, 0x1F, 0xFF,
0x7F, 0xFE, 0x00, 0xFF, 0xF0, 0x00, 0x1F, 0xFF, 0x7F, 0xFE, 0x00, 0xFF, 0xE0, 0x00, 0x3F, 0xFF,
0x7F, 0xFF, 0x01, 0xFF, 0xC0, 0x00, 0x3F, 0xFF, 0x7F, 0xFF, 0x01, 0x9F, 0x80, 0x00, 0x7F, 0xFF,
0x7F, 0xFF, 0x80, 0x1F, 0x80, 0x00, 0x7F, 0xFF, 0x7F, 0xFF, 0xC0, 0x3F, 0x00, 0x00, 0xFF, 0xFF,
0x7F, 0xFF, 0xC0, 0x3E, 0x00, 0x01, 0xFF, 0xFF, 0x7F, 0xFF, 0xE0, 0x7C, 0x00, 0x03, 0xFF, 0xFF,
0x7F, 0xFF, 0xF0, 0x78, 0x00, 0x07, 0xFF, 0xFF, 0x7F, 0xFF, 0xFC, 0xF8, 0x00, 0x0F, 0xFF, 0xFF,
0x7F, 0xFF, 0xFC, 0xF0, 0x00, 0x3F, 0xFF, 0xFF, 0x7F, 0xFF, 0xF9, 0xE0, 0x00, 0xFF, 0xFF, 0xFF,
0x7F, 0xFF, 0xFB, 0xF0, 0x03, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0x7F, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
0x7F, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
0x3F, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x1F, 0xFF, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC,
0x0F, 0xFF, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x03, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

typedef enum REFLOW_STATE
{
  REFLOW_STATE_IDLE,
  REFLOW_STATE_PREHEAT,
  REFLOW_STATE_SOAK,
  REFLOW_STATE_REFLOW,
  REFLOW_STATE_COOL,
  REFLOW_STATE_COMPLETE,
  REFLOW_STATE_TOO_HOT,
  REFLOW_STATE_ERROR
} reflowState_t;

typedef enum REFLOW_STATUS
{
  REFLOW_STATUS_OFF,
  REFLOW_STATUS_ON
} reflowStatus_t;

typedef	enum SWITCH
{
	SWITCH_NONE,
	SWITCH_1,	
	SWITCH_2,
}	switch_t;

// ***** CONSTANTS *****
#define OLED_RESET 4
float TEMPERATURE_COOL       = 100;
float TEMPERATURE_SOAK_MIN   = 150;
float TEMPERATURE_SOAK_MAX   = 180;
float TEMPERATURE_REFLOW_MAX = 220;
float TEMP_VALUE_MENU = 0;

#define SENSOR_SAMPLING_TIME   1000
#define SOAK_TEMPERATURE_STEP  5
#define SOAK_MICRO_PERIOD      9000
#define DEBOUNCE_PERIOD_MIN    50

// ***** PID PARAMETERS *****
// ***** PRE-HEAT STAGE *****
float PID_KP_PREHEAT         = 300;
float PID_KI_PREHEAT         = 0.05;
float PID_KD_PREHEAT         = 350; 
// ***** SOAKING STAGE *****
float PID_KP_SOAK            = 300;
float PID_KI_SOAK            = 0.05;
float PID_KD_SOAK            = 350;
// ***** REFLOW STAGE *****
float PID_KP_REFLOW          = 300;
float PID_KI_REFLOW          = 0.05;
float PID_KD_REFLOW          = 350; 
#define PID_SAMPLE_TIME 1000

// ***** LCD MESSAGES *****
const char* ssdMessagesReflowStatus[] = {
  "  Ready  ",
  " Preheat ",
  "   Soak  ",
  "  Reflow ",
  "   Cool  ",
  " Complete",
  "  !HOT!  ",
  "  Error  "
};

// Pin Definitions
int TopPin = 8;  // Top    Element 
int BotPin = 7;  // Bottom Element
int DoorPin =6;  // Door Sense
int BuzPin = A2; // Buzzer Pin
int Led = 13;    // Heartbeat Led

int But1 = 9; // Start Button
int But2 = 10; // Menu  Button
int But3 = 11; // Plus  Button
int But4 = 12; // Minus Button

int thermocoupleCLKPin = A4;
int thermocoupleSOPin  = A3;
int thermocoupleCSPin  = A5;

// ***** PID CONTROL VARIABLES *****
double setpoint;
double input;
double inputOld; //Store old Temperature
double output;
double kp = PID_KP_PREHEAT;
double ki = PID_KI_PREHEAT;
double kd = PID_KD_PREHEAT;
int windowSize;
unsigned long windowStartTime;
unsigned long nextCheck;
unsigned long nextRead;
unsigned long timerSoak;
unsigned long buzzerPeriod;
boolean StartTest;

// Reflow oven controller state machine state variable
reflowState_t reflowState;
// Reflow oven controller status
reflowStatus_t reflowStatus;

//Button Variables
float MenuArray[14] = {TEMPERATURE_COOL,TEMPERATURE_SOAK_MIN,TEMPERATURE_SOAK_MAX,TEMPERATURE_REFLOW_MAX,
                       PID_KP_PREHEAT,PID_KI_PREHEAT,PID_KD_PREHEAT,
                       PID_KP_SOAK,PID_KI_SOAK,PID_KD_SOAK,
                       PID_KP_REFLOW,PID_KI_REFLOW,PID_KD_REFLOW,0};
float PromTest = 0;                       
byte  ArrowArray[5] = {24,32,40,48,56};
byte  ArrowIdx[13]  = {0,1,2,3,0,1,2,0,1,2,0,1,2};
byte  MathIdx[13]   = {0,0,0,0,0,1,0,0,1,0,0,1,0};
boolean MenuFlag;
boolean PlusFlag;
boolean MinusFlag;

byte ButtCount  = 0;
int  MenuCount  = -1;
int  PlusMinus  = 0;

// tc Error Counter
int tcErrorCtr = 0;

// Seconds timer
int timerSeconds;

// Library Setup
// Specify PID control interface
PID reflowOvenPID(&input, &output, &setpoint, kp, ki, kd, DIRECT);
Adafruit_SSD1306 display(OLED_RESET);
Adafruit_MAX31855 thermocouple(thermocoupleCLKPin, thermocoupleCSPin, thermocoupleSOPin);

// Setup
void setup()   {        
  // Setup Serial Baudrate  
  Serial.begin(9600);

  for (int i = 0; i<12;i++){
    EEPROM.writeFloat(i*4, MenuArray[i]);  
  }

      

    
  // by default, we'll generate the high voltage from the 3.3v line internally! (neat!)
  display.begin(SSD1306_SWITCHCAPVCC);
  display.clearDisplay();
  display.setCursor(0,0);
  display.setTextSize(2);
  display.setTextColor(WHITE); 
  display.println(" EEPROM ");
  display.drawLine(0, 16, 127, 16, WHITE);
  display.display();
 
}

// Begin Main Loop 
void loop(){

}

